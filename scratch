
		class edge {
			public:
			node_id_t n1;
			node_id_t n2;
			cost_t cost;

			/*void serialize(char *buf) {
				assert(sizeof(node_id_t) == 1);
				assert(sizeof(cost_t) == 1);

				*(buf) = n1;
				*(buf + 1) = n2;
				*(buf + 2) = cost;
			}*/
			
			bool contains(node_id_t id) const {
				return ( (n1 == id) || (n2 == id) );
			}

			static bool compare(const edge &e1, const edge &e2) {
				return (e1.n1 == e2.n1 && e1.n2 == e2.n2) || (e1.n2 == e2.n1 && e1.n1 == e2.n2);
			}

			friend bool operator== (const edge &e1, const edge &e2) {
				//printf("compare %d<->%d to %d<->%d\n", e1.n1, e1.n2, e2.n1, e2.n2);
				return compare(e1, e2);
			}

			friend bool operator!= (const edge &e1, const edge &e2) {return !(e1 == e2); }
			friend bool operator< (const edge &e1, const edge &e2) { 
				printf("compare %d<->%d to %d<->%d: ", e1.n1, e1.n2, e2.n1, e2.n2);
				if(e1 == e2) {
					printf("equal\n");
					return false;
				}
				else {	
					bool ret = (e1.n1 < e2.n1) || ( (e1.n1 == e2.n1) && (e1.n2 < e2.n2) );
					printf(ret? "less\n" : "greater\n");
					return ret;
				}
			}

		};



void node::on_link_update(proto_base::header_t *hdr, uint16_t msg_len, int buflen, const char *buf) {
	proto_coord::link_desc_t *ld;
	link_map_t::iterator it;
	bool deleted = false;

	if(msg_len != sizeof(proto_coord::link_desc_t) ) {
		FATAL("unexpected size of link update message");
	}

	ld = (proto_coord::link_desc_t *) (buf + sizeof(proto_base::header_t));
	
	m_links[ld->id].second = ld->cost;
	memset(&m_links[ld->id].first, 0, sizeof(struct sockaddr_in) );
	m_links[ld->id].first.sin_addr.s_addr = ld->s_addr;
	m_links[ld->id].first.sin_port = ld->port;
	m_links[ld->id].first.sin_family = AF_INET;
	
	NET04_LOG("node %d: updated link to node %d (%s:%d) with cost %d\n", m_node_id, ld->id, inet_ntoa(m_links[ld->id].first.sin_addr), ntohs(m_links[ld->id].first.sin_port), ld->cost);
}


